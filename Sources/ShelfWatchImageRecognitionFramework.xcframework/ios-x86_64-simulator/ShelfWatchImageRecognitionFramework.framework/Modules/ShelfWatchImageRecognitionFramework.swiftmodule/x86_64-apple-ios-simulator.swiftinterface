// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShelfWatchImageRecognitionFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Accelerate
import CoreData
import CoreLocation
import CoreMotion
import DeveloperToolsSupport
import Foundation
import MetalKit
import MetalPerformanceShaders
import Photos
@_exported import ShelfWatchImageRecognitionFramework
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class ImageBatch {
  final public let sessionId: Swift.String
  public var images: [ShelfWatchImageRecognitionFramework.ImageBatchMeta]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageBatchMeta {
  final public let uri: Swift.String
  final public let uploadStatus: Swift.Bool
  final public let error: (any Swift.Error)?
  @objc deinit
}
public struct CameraConfiguration {
  public init(orientation: Swift.String, widthPercentage: CoreFoundation.CGFloat, resolution: CoreFoundation.CGFloat, referenceUrl: Swift.String, allowCrop: Swift.Bool, allowBlurCheck: Swift.Bool, zoomLevel: Swift.String, isRetake: Swift.Bool, showOverlapToggleButton: Swift.Bool, showGridlines: Swift.Bool, uploadParams: [Swift.String : Any])
}
public enum ResizeFramework {
  case uikit, coreImage, coreGraphics, imageIO, accelerate
  public static func == (a: ShelfWatchImageRecognitionFramework.ResizeFramework, b: ShelfWatchImageRecognitionFramework.ResizeFramework) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ImageUploadResult {
  case success
  case failure(error: any Swift.Error)
  case progress(progress: Foundation.Progress?)
}
@_inheritsConvenienceInitializers @objc(CDCapturedImageBatch) public class CDCapturedImageBatch : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public class ShelfWatchCamera {
  public init(licenseKey: Swift.String, firebaseBucket: Swift.String, delegate: any ShelfWatchImageRecognitionFramework.ImageUploadDelegate)
  public func showCamera(with config: ShelfWatchImageRecognitionFramework.CameraConfiguration, viewController: UIKit.UIViewController)
  public func uploadFailedImage()
  @objc deinit
}
public protocol ImageUploadDelegate : AnyObject {
  func didReceiveImage(result: ShelfWatchImageRecognitionFramework.BatchImageUploadResult)
  func didReceiveAllImages(batches: [ShelfWatchImageRecognitionFramework.ImageBatch])
}
public enum BatchImageUploadResult {
  case batch(batch: ShelfWatchImageRecognitionFramework.ImageBatch)
  case batchMetaStatus(meta: ShelfWatchImageRecognitionFramework.ImageBatchMeta)
  case sucess(sucess: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc(CDImageMetaData) public class CDImageMetaData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ShelfWatchImageRecognitionFramework.CDImageMetaData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDImageMetaData>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var position: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dimension: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalImageCapture: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orientation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var zoomLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cropCoordinates: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var overlayValues: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uploadParam: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastImageFlag: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDImageMetaData : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension UIKit.UIImage {
  public enum DataUnits : Swift.String {
    case byte, kilobyte, megabyte, gigabyte
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setCorner(radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func makeCircle()
  @_Concurrency.MainActor(unsafe) public func setBorder(width: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setRadiusFor(corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setShadow(color: UIKit.UIColor)
}
extension ShelfWatchImageRecognitionFramework.CDCapturedImageBatch {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDCapturedImageBatch>
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var images: [ShelfWatchImageRecognitionFramework.CDImageMetaData]? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDCapturedImageBatch {
  @objc(addImagesObject:) @NSManaged dynamic public func addToImages(_ value: ShelfWatchImageRecognitionFramework.CDImageMetaData)
  @objc(removeImagesObject:) @NSManaged dynamic public func removeFromImages(_ value: ShelfWatchImageRecognitionFramework.CDImageMetaData)
  @objc(addImages:) @NSManaged dynamic public func addToImages(_ values: Foundation.NSSet)
  @objc(removeImages:) @NSManaged dynamic public func removeFromImages(_ values: Foundation.NSSet)
}
extension ShelfWatchImageRecognitionFramework.CDCapturedImageBatch : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension Swift.String {
  public var trimmed: Swift.String {
    get
  }
}
extension ShelfWatchImageRecognitionFramework.ResizeFramework : Swift.Equatable {}
extension ShelfWatchImageRecognitionFramework.ResizeFramework : Swift.Hashable {}
extension UIKit.UIImage.DataUnits : Swift.Equatable {}
extension UIKit.UIImage.DataUnits : Swift.Hashable {}
extension UIKit.UIImage.DataUnits : Swift.RawRepresentable {}
