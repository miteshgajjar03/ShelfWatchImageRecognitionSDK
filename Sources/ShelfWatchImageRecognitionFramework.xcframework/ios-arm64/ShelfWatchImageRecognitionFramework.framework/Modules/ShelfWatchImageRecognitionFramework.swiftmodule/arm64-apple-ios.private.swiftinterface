// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShelfWatchImageRecognitionFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Accelerate
import CoreLocation
import CoreMotion
import DeveloperToolsSupport
import Foundation
import Photos
@_exported import ShelfWatchImageRecognitionFramework
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol CameraDelegate : AnyObject {
  func didReceiveImageUpload(_ result: ShelfWatchImageRecognitionFramework.UploadResult)
}
public enum UploadResult {
  case success
  case failure(error: any Swift.Error)
  case progress(progress: Swift.Float)
}
public struct CameraConfiguration {
  public init(orientation: Swift.String, widthPercent: CoreFoundation.CGFloat, deeplink: Swift.String, dimension: CoreFoundation.CGFloat, referenceurl: Swift.String, shouldNavigateCropReview: Swift.Bool, blurCheckEnabled: Swift.Bool, zoomLevel: Swift.String, uploadParameterJSON: [Swift.String : Any])
}
public enum ResizeFramework {
  case uikit, coreImage, coreGraphics, imageIO, accelerate
  public static func == (a: ShelfWatchImageRecognitionFramework.ResizeFramework, b: ShelfWatchImageRecognitionFramework.ResizeFramework) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ImageUploadResult {
  case success
  case failure(error: any Swift.Error)
  case progress(progress: Foundation.Progress?)
}
@_hasMissingDesignatedInitializers public class ShelfWatchCamera {
  public static func show(with config: ShelfWatchImageRecognitionFramework.CameraConfiguration, viewController: UIKit.UIViewController, delegate: any ShelfWatchImageRecognitionFramework.CameraDelegate)
  @objc deinit
}
extension UIKit.UIImage {
  public enum DataUnits : Swift.String {
    case byte, kilobyte, megabyte, gigabyte
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setCorner(radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func makeCircle()
  @_Concurrency.MainActor(unsafe) public func setBorder(width: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setRadiusFor(corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setShadow(color: UIKit.UIColor)
}
extension Swift.String {
  public var trimmed: Swift.String {
    get
  }
}
extension ShelfWatchImageRecognitionFramework.ResizeFramework : Swift.Equatable {}
extension ShelfWatchImageRecognitionFramework.ResizeFramework : Swift.Hashable {}
extension UIKit.UIImage.DataUnits : Swift.Equatable {}
extension UIKit.UIImage.DataUnits : Swift.Hashable {}
extension UIKit.UIImage.DataUnits : Swift.RawRepresentable {}
