// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShelfWatchImageRecognitionFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ARKit
import AVFoundation
import AVKit
import Accelerate
import CoreData
import CoreLocation
import CoreML
import CoreMotion
import DeveloperToolsSupport
import Foundation
import MetalKit
import MetalPerformanceShaders
import Network
import Photos
@_exported import ShelfWatchImageRecognitionFramework
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
@_hasMissingDesignatedInitializers public class ImageBatch {
  final public let sessionId: Swift.String
  public var images: [ShelfWatchImageRecognitionFramework.ImageBatchMeta]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImageBatchMeta {
  final public let uri: Swift.String
  final public let status: Swift.Bool
  final public let error: (any Swift.Error)?
  @objc deinit
}
public struct ImageUploadStatusMeta {
  public let uri: Swift.String
  public let status: Swift.Bool
  public let imageMetaData: [Swift.String : Swift.String]
  public let error: (any Swift.Error)?
  public init(uri: Swift.String, status: Swift.Bool, imageMetaData: [Swift.String : Swift.String], error: (any Swift.Error)?)
}
public struct CameraConfiguration {
  public init(orientation: Swift.String, widthPercentage: CoreFoundation.CGFloat, resolution: CoreFoundation.CGFloat, referenceUrl: Swift.String, allowCrop: Swift.Bool, allowBlurCheck: Swift.Bool, zoomLevel: Swift.String, isRetake: Swift.Bool, showOverlapToggleButton: Swift.Bool, showGridlines: Swift.Bool, languageCode: Swift.String, appName: Swift.String, wideAngleMode: ShelfWatchImageRecognitionFramework.WideAngleMode, showSingleOverlap: Swift.Bool, overlapImageOpacity: Swift.Double, setOverlapArea: Swift.Bool, uploadParams: [Swift.String : Any])
}
public struct ARConfig {
}
public enum CameraOrientation : Swift.String {
  case portrait
  case landscape
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LanguageCode : Swift.String {
  case english
  case polish
  case slovak
  case arabic
  case chineseTraditional
  case spanish
  case vietnamese
  case portuguese
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ResizeFramework {
  case uikit, coreImage, coreGraphics, imageIO, accelerate
  public static func == (a: ShelfWatchImageRecognitionFramework.ResizeFramework, b: ShelfWatchImageRecognitionFramework.ResizeFramework) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(CDClassAttribute) public class CDClassAttribute : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ShelfWatchImageRecognitionFramework.CDUserDetail {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDUserDetail>
  @objc @NSManaged dynamic public var bucket: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientUserId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var projectId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryIds: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDUserDetail : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public enum ImageUploadResult {
  case success
  case failure(error: any Swift.Error)
  case progress(progress: Foundation.Progress?)
}
extension Swift.Encodable {
  public var toJSONString: Swift.String {
    get
  }
  public func toData() -> Foundation.Data?
  public func asDictionary() throws -> [Swift.String : Any]
  public func toRequestData() -> Foundation.Data?
}
extension ShelfWatchImageRecognitionFramework.CDCommercialStandardMapping {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDCommercialStandardMapping>
  @objc @NSManaged dynamic public var planogramName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shelf: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var column1: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sequence: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subBrand: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDCommercialStandardMapping : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CDCapturedImageBatch) public class CDCapturedImageBatch : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ShelfWatchImageRecognitionFramework.CDClassAttribute {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDClassAttribute>
  @objc @NSManaged dynamic public var groupId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: [ShelfWatchImageRecognitionFramework.CDClassAttributeData]? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDClassAttribute {
  @objc(addDataObject:) @NSManaged dynamic public func addToData(_ value: ShelfWatchImageRecognitionFramework.CDClassAttributeData)
  @objc(removeDataObject:) @NSManaged dynamic public func removeFromData(_ value: ShelfWatchImageRecognitionFramework.CDClassAttributeData)
  @objc(addData:) @NSManaged dynamic public func addToData(_ values: Foundation.NSSet)
  @objc(removeData:) @NSManaged dynamic public func removeFromData(_ values: Foundation.NSSet)
}
extension ShelfWatchImageRecognitionFramework.CDClassAttribute : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension ShelfWatchImageRecognitionFramework.CDARCapturedImage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDARCapturedImage>
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var images: [ShelfWatchImageRecognitionFramework.CDARCapturedImageMeta]? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDARCapturedImage {
  @objc(addImagesObject:) @NSManaged dynamic public func addToImages(_ value: ShelfWatchImageRecognitionFramework.CDARCapturedImageMeta)
  @objc(removeImagesObject:) @NSManaged dynamic public func removeFromImages(_ value: ShelfWatchImageRecognitionFramework.CDARCapturedImageMeta)
  @objc(addImages:) @NSManaged dynamic public func addToImages(_ values: Foundation.NSOrderedSet)
  @objc(removeImages:) @NSManaged dynamic public func removeFromImages(_ values: Foundation.NSOrderedSet)
}
extension ShelfWatchImageRecognitionFramework.CDARCapturedImage : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CDUserDetail) public class CDUserDetail : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ShelfWatchImageRecognitionFramework.CDClassAttributeData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDClassAttributeData>
  @objc @NSManaged dynamic public var attributeId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributeName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributes: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributeValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var class_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var classAttributeId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var classId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientClassId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientModifiedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var conflictClass: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created_at__1: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var createdAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deleteStatus: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var groupId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hideFlag: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_deleted: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isActive: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iteration: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified_at__1: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modifiedAt: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var projectId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var review: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sequence: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tdVersionId: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDClassAttributeData : Swift.Identifiable {
  public typealias ID = Swift.String?
}
extension UIKit.UIViewController : UIKit.UIPopoverPresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController, traitCollection: UIKit.UITraitCollection) -> UIKit.UIModalPresentationStyle
}
extension ShelfWatchImageRecognitionFramework.CDARCapturedImageMeta {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDARCapturedImageMeta>
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var projectId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var appTimestamp: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var detections: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uploadParam: Foundation.Data? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDARCapturedImageMeta : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
public class ShelfWatchCamera {
  public init(projectId: Swift.String, userId: Swift.String, userInfo: [Swift.String : Any], delegate: any ShelfWatchImageRecognitionFramework.ImageUploadDelegate)
  public func showCamera(with config: ShelfWatchImageRecognitionFramework.CameraConfiguration, viewController: UIKit.UIViewController)
  public func showARCamera(viewController: UIKit.UIViewController, config: ShelfWatchImageRecognitionFramework.ARConfig)
  public func uploadFailedImage()
  public func logout()
  @objc deinit
}
extension ShelfWatchImageRecognitionFramework.ShelfWatchCamera {
  public func logInitSDK(logMessage: Swift.String)
}
@_inheritsConvenienceInitializers @objc(CDListing) public class CDListing : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ShelfWatchImageRecognitionFramework.CDMasterData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDMasterData>
  @objc @NSManaged dynamic public var pipelineFlag: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientShopId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shopName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shopAddress: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var groupName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shelfSections: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var regularOSA: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sos: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shopId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributeName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributeValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var competition: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var classId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var groupId: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDMasterData : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CDMasterData) public class CDMasterData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public protocol ImageUploadDelegate : AnyObject {
  func didReceiveBatchUpload(result: ShelfWatchImageRecognitionFramework.BatchUploadResult)
  func didCloseCameraSDK()
  func onUploadImagePressed(uploadImageEventMeta: ShelfWatchImageRecognitionFramework.UploadImageEventMeta)
}
public enum BatchUploadResult {
  case didReceiveBatches(batches: [ShelfWatchImageRecognitionFramework.ImageBatch])
  case didReceiveBatch(batch: ShelfWatchImageRecognitionFramework.ImageBatch)
  case didReceiveImageUploadStatus(imageStatus: ShelfWatchImageRecognitionFramework.ImageUploadStatusMeta)
  case didFinishedUpload(finished: Swift.Bool)
}
public struct UploadImageEventMeta {
  public let uploadParams: [Swift.String : Any]
  public let images: [Swift.String]
  public let isRetake: Swift.Bool
  public let sessionId: Swift.String
}
@_inheritsConvenienceInitializers @objc(CDShopDataChild) public class CDShopDataChild : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CDARCapturedImage) public class CDARCapturedImage : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct WideAngleMode {
  public init(flag: Swift.Bool, freeze: Swift.Bool)
}
extension ShelfWatchImageRecognitionFramework.CDKPIApplicability {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDKPIApplicability>
  @objc @NSManaged dynamic public var shelfSection: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var answer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailabilityHardPlanogram: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailabilityOthers: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailabilityKpOwnedFridge: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailabilityShelf: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailabilitySecondaryPlacement: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var commercialStandardComplianceKpOwnedFridge: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var commercialStandardCompliancePiwaSmakowe: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var commercialStandardComplianceModern: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var commercialStandardComplianceBuforowa: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var commercialStandardCompliance45cm: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var commercialStandardCompliance70cm: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var standardComplianceNab: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var standardComplianceDelikatesyCentrum: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailability45cm: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailability70cm: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailabilityBuforowa: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailabilityPiwaSmakowe: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailabilityModern: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuAvailabilityQuantitativeRules: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subSegmentNeighborhood: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandNeighbourhood: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var outletAvailabilityCompliance: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var listingCompliance: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var novelties: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var kompanCompliance30: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var kompanCompliance30Max: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageCaptured: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDKPIApplicability : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CDImageMetaData) public class CDImageMetaData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
  @_Concurrency.MainActor(unsafe) public var exifOrientation: Swift.UInt32 {
    get
  }
}
extension ShelfWatchImageRecognitionFramework.CDShopData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDShopData>
  @objc @NSManaged dynamic public var shopId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var data: [ShelfWatchImageRecognitionFramework.CDShopDataChild]? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDShopData {
  @objc(addDataObject:) @NSManaged dynamic public func addToData(_ value: ShelfWatchImageRecognitionFramework.CDShopDataChild)
  @objc(removeDataObject:) @NSManaged dynamic public func removeFromData(_ value: ShelfWatchImageRecognitionFramework.CDShopDataChild)
  @objc(addData:) @NSManaged dynamic public func addToData(_ values: Foundation.NSSet)
  @objc(removeData:) @NSManaged dynamic public func removeFromData(_ values: Foundation.NSSet)
}
extension ShelfWatchImageRecognitionFramework.CDShopData : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension ShelfWatchImageRecognitionFramework.CDImageMetaData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDImageMetaData>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var position: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dimension: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var totalImageCapture: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var orientation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var zoomLevel: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cropCoordinates: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var overlayValues: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uploadParam: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastImageFlag: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageSequenceNo: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var appTimestamp: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDImageMetaData : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension ShelfWatchImageRecognitionFramework.CDPriceListProduct {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDPriceListProduct>
  @objc @NSManaged dynamic public var sfaName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var idSapMaterialNumber: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDPriceListProduct : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension UIKit.UIImage {
  public enum DataUnits : Swift.String {
    case byte, kilobyte, megabyte, gigabyte
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@_inheritsConvenienceInitializers @objc(CDBrandNeighbourhood) public class CDBrandNeighbourhood : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ShelfWatchImageRecognitionFramework.CDShopDataChild {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDShopDataChild>
  @objc @NSManaged dynamic public var pipelineFlag: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientShopId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shopName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shopAddress: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var groupName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shelfSections: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var regularOSA: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sos: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shopId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributeName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var attributeValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var competition: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var skuName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var classId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var groupId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var relationship: ShelfWatchImageRecognitionFramework.CDShopData? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDShopDataChild : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setCorner(radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func makeCircle()
  @_Concurrency.MainActor(unsafe) public func makeWidthCircle()
  @_Concurrency.MainActor(unsafe) public func setBorder(width: CoreFoundation.CGFloat, color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setRadiusFor(corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setShadow(color: UIKit.UIColor)
}
extension ShelfWatchImageRecognitionFramework.CDCapturedImageBatch {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDCapturedImageBatch>
  @objc @NSManaged dynamic public var sessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var images: [ShelfWatchImageRecognitionFramework.CDImageMetaData]? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDCapturedImageBatch {
  @objc(addImagesObject:) @NSManaged dynamic public func addToImages(_ value: ShelfWatchImageRecognitionFramework.CDImageMetaData)
  @objc(removeImagesObject:) @NSManaged dynamic public func removeFromImages(_ value: ShelfWatchImageRecognitionFramework.CDImageMetaData)
  @objc(addImages:) @NSManaged dynamic public func addToImages(_ values: Foundation.NSSet)
  @objc(removeImages:) @NSManaged dynamic public func removeFromImages(_ values: Foundation.NSSet)
}
extension ShelfWatchImageRecognitionFramework.CDCapturedImageBatch : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CDShopData) public class CDShopData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Foundation.Data {
  public enum DataUnits : Swift.String {
    case byte, kilobyte, megabyte, gigabyte
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension ShelfWatchImageRecognitionFramework.CDSubSegmentNeighbourhood {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDSubSegmentNeighbourhood>
  @objc @NSManaged dynamic public var segment: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productGroup: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDSubSegmentNeighbourhood : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CDARCapturedImageMeta) public class CDARCapturedImageMeta : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CDPriceListProduct) public class CDPriceListProduct : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CDCommercialStandardMapping) public class CDCommercialStandardMapping : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CDSubSegmentNeighbourhood) public class CDSubSegmentNeighbourhood : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Swift.String {
  public var trimmed: Swift.String {
    get
  }
}
extension ShelfWatchImageRecognitionFramework.CDBrandNeighbourhood {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDBrandNeighbourhood>
  @objc @NSManaged dynamic public var kpBrand: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var competitor: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rule: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDBrandNeighbourhood : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension ShelfWatchImageRecognitionFramework.CDListing {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ShelfWatchImageRecognitionFramework.CDListing>
  @objc @NSManaged dynamic public var maxSetValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recordName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recordNumber: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sfaName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var setId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var setType: Swift.String? {
    @objc get
    @objc set
  }
}
extension ShelfWatchImageRecognitionFramework.CDListing : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CDClassAttributeData) public class CDClassAttributeData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CDKPIApplicability) public class CDKPIApplicability : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ShelfWatchImageRecognitionFramework.CameraOrientation : Swift.Equatable {}
extension ShelfWatchImageRecognitionFramework.CameraOrientation : Swift.Hashable {}
extension ShelfWatchImageRecognitionFramework.CameraOrientation : Swift.RawRepresentable {}
extension ShelfWatchImageRecognitionFramework.LanguageCode : Swift.Equatable {}
extension ShelfWatchImageRecognitionFramework.LanguageCode : Swift.Hashable {}
extension ShelfWatchImageRecognitionFramework.LanguageCode : Swift.RawRepresentable {}
extension ShelfWatchImageRecognitionFramework.ResizeFramework : Swift.Equatable {}
extension ShelfWatchImageRecognitionFramework.ResizeFramework : Swift.Hashable {}
extension UIKit.UIImage.DataUnits : Swift.Equatable {}
extension UIKit.UIImage.DataUnits : Swift.Hashable {}
extension UIKit.UIImage.DataUnits : Swift.RawRepresentable {}
extension Foundation.Data.DataUnits : Swift.Equatable {}
extension Foundation.Data.DataUnits : Swift.Hashable {}
extension Foundation.Data.DataUnits : Swift.RawRepresentable {}
